//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Notepad.NotepadServiceProxy {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoteDto", Namespace="http://schemas.datacontract.org/2004/07/NotepadServiceRole")]
    public partial class NoteDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int NoteIdField;
        
        private string NoteTextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoteId {
            get {
                return this.NoteIdField;
            }
            set {
                if ((this.NoteIdField.Equals(value) != true)) {
                    this.NoteIdField = value;
                    this.RaisePropertyChanged("NoteId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NoteText {
            get {
                return this.NoteTextField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteTextField, value) != true)) {
                    this.NoteTextField = value;
                    this.RaisePropertyChanged("NoteText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotepadServiceProxy.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/AddUser", ReplyAction="http://tempuri.org/IService/AddUserResponse")]
        System.IAsyncResult BeginAddUser(System.Guid userId, string userName, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndAddUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/AddNote", ReplyAction="http://tempuri.org/IService/AddNoteResponse")]
        System.IAsyncResult BeginAddNote(System.Guid userId, string notedescription, string noteText, System.AsyncCallback callback, object asyncState);
        
        Notepad.NotepadServiceProxy.NoteDto EndAddNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/UpdateNote", ReplyAction="http://tempuri.org/IService/UpdateNoteResponse")]
        System.IAsyncResult BeginUpdateNote(int noteId, string noteText, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/DeleteNote", ReplyAction="http://tempuri.org/IService/DeleteNoteResponse")]
        System.IAsyncResult BeginDeleteNote(System.Guid userId, int noteId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetNotes", ReplyAction="http://tempuri.org/IService/GetNotesResponse")]
        System.IAsyncResult BeginGetNotes(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Notepad.NotepadServiceProxy.NoteDto> EndGetNotes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetNote", ReplyAction="http://tempuri.org/IService/GetNoteResponse")]
        System.IAsyncResult BeginGetNote(System.Guid userId, int noteId, System.AsyncCallback callback, object asyncState);
        
        Notepad.NotepadServiceProxy.NoteDto EndGetNote(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Notepad.NotepadServiceProxy.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Notepad.NotepadServiceProxy.NoteDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Notepad.NotepadServiceProxy.NoteDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Notepad.NotepadServiceProxy.NoteDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Notepad.NotepadServiceProxy.NoteDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Notepad.NotepadServiceProxy.NoteDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Notepad.NotepadServiceProxy.NoteDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Notepad.NotepadServiceProxy.IService>, Notepad.NotepadServiceProxy.IService {
        
        private BeginOperationDelegate onBeginAddUserDelegate;
        
        private EndOperationDelegate onEndAddUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNoteDelegate;
        
        private EndOperationDelegate onEndAddNoteDelegate;
        
        private System.Threading.SendOrPostCallback onAddNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateNoteDelegate;
        
        private EndOperationDelegate onEndUpdateNoteDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteNoteDelegate;
        
        private EndOperationDelegate onEndDeleteNoteDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotesDelegate;
        
        private EndOperationDelegate onEndGetNotesDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNoteDelegate;
        
        private EndOperationDelegate onEndGetNoteDelegate;
        
        private System.Threading.SendOrPostCallback onGetNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AddUserCompletedEventArgs> AddUserCompleted;
        
        public event System.EventHandler<AddNoteCompletedEventArgs> AddNoteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateNoteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteNoteCompleted;
        
        public event System.EventHandler<GetNotesCompletedEventArgs> GetNotesCompleted;
        
        public event System.EventHandler<GetNoteCompletedEventArgs> GetNoteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad.NotepadServiceProxy.IService.BeginAddUser(System.Guid userId, string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUser(userId, userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Guid Notepad.NotepadServiceProxy.IService.EndAddUser(System.IAsyncResult result) {
            return base.Channel.EndAddUser(result);
        }
        
        private System.IAsyncResult OnBeginAddUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string userName = ((string)(inValues[1]));
            return ((Notepad.NotepadServiceProxy.IService)(this)).BeginAddUser(userId, userName, callback, asyncState);
        }
        
        private object[] OnEndAddUser(System.IAsyncResult result) {
            System.Guid retVal = ((Notepad.NotepadServiceProxy.IService)(this)).EndAddUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserCompleted(object state) {
            if ((this.AddUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserAsync(System.Guid userId, string userName) {
            this.AddUserAsync(userId, userName, null);
        }
        
        public void AddUserAsync(System.Guid userId, string userName, object userState) {
            if ((this.onBeginAddUserDelegate == null)) {
                this.onBeginAddUserDelegate = new BeginOperationDelegate(this.OnBeginAddUser);
            }
            if ((this.onEndAddUserDelegate == null)) {
                this.onEndAddUserDelegate = new EndOperationDelegate(this.OnEndAddUser);
            }
            if ((this.onAddUserCompletedDelegate == null)) {
                this.onAddUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDelegate, new object[] {
                        userId,
                        userName}, this.onEndAddUserDelegate, this.onAddUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad.NotepadServiceProxy.IService.BeginAddNote(System.Guid userId, string notedescription, string noteText, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNote(userId, notedescription, noteText, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Notepad.NotepadServiceProxy.NoteDto Notepad.NotepadServiceProxy.IService.EndAddNote(System.IAsyncResult result) {
            return base.Channel.EndAddNote(result);
        }
        
        private System.IAsyncResult OnBeginAddNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string notedescription = ((string)(inValues[1]));
            string noteText = ((string)(inValues[2]));
            return ((Notepad.NotepadServiceProxy.IService)(this)).BeginAddNote(userId, notedescription, noteText, callback, asyncState);
        }
        
        private object[] OnEndAddNote(System.IAsyncResult result) {
            Notepad.NotepadServiceProxy.NoteDto retVal = ((Notepad.NotepadServiceProxy.IService)(this)).EndAddNote(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddNoteCompleted(object state) {
            if ((this.AddNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNoteCompleted(this, new AddNoteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNoteAsync(System.Guid userId, string notedescription, string noteText) {
            this.AddNoteAsync(userId, notedescription, noteText, null);
        }
        
        public void AddNoteAsync(System.Guid userId, string notedescription, string noteText, object userState) {
            if ((this.onBeginAddNoteDelegate == null)) {
                this.onBeginAddNoteDelegate = new BeginOperationDelegate(this.OnBeginAddNote);
            }
            if ((this.onEndAddNoteDelegate == null)) {
                this.onEndAddNoteDelegate = new EndOperationDelegate(this.OnEndAddNote);
            }
            if ((this.onAddNoteCompletedDelegate == null)) {
                this.onAddNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNoteCompleted);
            }
            base.InvokeAsync(this.onBeginAddNoteDelegate, new object[] {
                        userId,
                        notedescription,
                        noteText}, this.onEndAddNoteDelegate, this.onAddNoteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad.NotepadServiceProxy.IService.BeginUpdateNote(int noteId, string noteText, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateNote(noteId, noteText, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad.NotepadServiceProxy.IService.EndUpdateNote(System.IAsyncResult result) {
            base.Channel.EndUpdateNote(result);
        }
        
        private System.IAsyncResult OnBeginUpdateNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int noteId = ((int)(inValues[0]));
            string noteText = ((string)(inValues[1]));
            return ((Notepad.NotepadServiceProxy.IService)(this)).BeginUpdateNote(noteId, noteText, callback, asyncState);
        }
        
        private object[] OnEndUpdateNote(System.IAsyncResult result) {
            ((Notepad.NotepadServiceProxy.IService)(this)).EndUpdateNote(result);
            return null;
        }
        
        private void OnUpdateNoteCompleted(object state) {
            if ((this.UpdateNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateNoteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateNoteAsync(int noteId, string noteText) {
            this.UpdateNoteAsync(noteId, noteText, null);
        }
        
        public void UpdateNoteAsync(int noteId, string noteText, object userState) {
            if ((this.onBeginUpdateNoteDelegate == null)) {
                this.onBeginUpdateNoteDelegate = new BeginOperationDelegate(this.OnBeginUpdateNote);
            }
            if ((this.onEndUpdateNoteDelegate == null)) {
                this.onEndUpdateNoteDelegate = new EndOperationDelegate(this.OnEndUpdateNote);
            }
            if ((this.onUpdateNoteCompletedDelegate == null)) {
                this.onUpdateNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateNoteCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateNoteDelegate, new object[] {
                        noteId,
                        noteText}, this.onEndUpdateNoteDelegate, this.onUpdateNoteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad.NotepadServiceProxy.IService.BeginDeleteNote(System.Guid userId, int noteId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteNote(userId, noteId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad.NotepadServiceProxy.IService.EndDeleteNote(System.IAsyncResult result) {
            base.Channel.EndDeleteNote(result);
        }
        
        private System.IAsyncResult OnBeginDeleteNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int noteId = ((int)(inValues[1]));
            return ((Notepad.NotepadServiceProxy.IService)(this)).BeginDeleteNote(userId, noteId, callback, asyncState);
        }
        
        private object[] OnEndDeleteNote(System.IAsyncResult result) {
            ((Notepad.NotepadServiceProxy.IService)(this)).EndDeleteNote(result);
            return null;
        }
        
        private void OnDeleteNoteCompleted(object state) {
            if ((this.DeleteNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteNoteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteNoteAsync(System.Guid userId, int noteId) {
            this.DeleteNoteAsync(userId, noteId, null);
        }
        
        public void DeleteNoteAsync(System.Guid userId, int noteId, object userState) {
            if ((this.onBeginDeleteNoteDelegate == null)) {
                this.onBeginDeleteNoteDelegate = new BeginOperationDelegate(this.OnBeginDeleteNote);
            }
            if ((this.onEndDeleteNoteDelegate == null)) {
                this.onEndDeleteNoteDelegate = new EndOperationDelegate(this.OnEndDeleteNote);
            }
            if ((this.onDeleteNoteCompletedDelegate == null)) {
                this.onDeleteNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteNoteCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteNoteDelegate, new object[] {
                        userId,
                        noteId}, this.onEndDeleteNoteDelegate, this.onDeleteNoteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad.NotepadServiceProxy.IService.BeginGetNotes(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotes(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Notepad.NotepadServiceProxy.NoteDto> Notepad.NotepadServiceProxy.IService.EndGetNotes(System.IAsyncResult result) {
            return base.Channel.EndGetNotes(result);
        }
        
        private System.IAsyncResult OnBeginGetNotes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((Notepad.NotepadServiceProxy.IService)(this)).BeginGetNotes(userId, callback, asyncState);
        }
        
        private object[] OnEndGetNotes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Notepad.NotepadServiceProxy.NoteDto> retVal = ((Notepad.NotepadServiceProxy.IService)(this)).EndGetNotes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotesCompleted(object state) {
            if ((this.GetNotesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotesCompleted(this, new GetNotesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotesAsync(System.Guid userId) {
            this.GetNotesAsync(userId, null);
        }
        
        public void GetNotesAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetNotesDelegate == null)) {
                this.onBeginGetNotesDelegate = new BeginOperationDelegate(this.OnBeginGetNotes);
            }
            if ((this.onEndGetNotesDelegate == null)) {
                this.onEndGetNotesDelegate = new EndOperationDelegate(this.OnEndGetNotes);
            }
            if ((this.onGetNotesCompletedDelegate == null)) {
                this.onGetNotesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotesCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotesDelegate, new object[] {
                        userId}, this.onEndGetNotesDelegate, this.onGetNotesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad.NotepadServiceProxy.IService.BeginGetNote(System.Guid userId, int noteId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNote(userId, noteId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Notepad.NotepadServiceProxy.NoteDto Notepad.NotepadServiceProxy.IService.EndGetNote(System.IAsyncResult result) {
            return base.Channel.EndGetNote(result);
        }
        
        private System.IAsyncResult OnBeginGetNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int noteId = ((int)(inValues[1]));
            return ((Notepad.NotepadServiceProxy.IService)(this)).BeginGetNote(userId, noteId, callback, asyncState);
        }
        
        private object[] OnEndGetNote(System.IAsyncResult result) {
            Notepad.NotepadServiceProxy.NoteDto retVal = ((Notepad.NotepadServiceProxy.IService)(this)).EndGetNote(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNoteCompleted(object state) {
            if ((this.GetNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNoteCompleted(this, new GetNoteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNoteAsync(System.Guid userId, int noteId) {
            this.GetNoteAsync(userId, noteId, null);
        }
        
        public void GetNoteAsync(System.Guid userId, int noteId, object userState) {
            if ((this.onBeginGetNoteDelegate == null)) {
                this.onBeginGetNoteDelegate = new BeginOperationDelegate(this.OnBeginGetNote);
            }
            if ((this.onEndGetNoteDelegate == null)) {
                this.onEndGetNoteDelegate = new EndOperationDelegate(this.OnEndGetNote);
            }
            if ((this.onGetNoteCompletedDelegate == null)) {
                this.onGetNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNoteCompleted);
            }
            base.InvokeAsync(this.onBeginGetNoteDelegate, new object[] {
                        userId,
                        noteId}, this.onEndGetNoteDelegate, this.onGetNoteCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Notepad.NotepadServiceProxy.IService CreateChannel() {
            return new ServiceClientChannel(this);
        }
        
        private class ServiceClientChannel : ChannelBase<Notepad.NotepadServiceProxy.IService>, Notepad.NotepadServiceProxy.IService {
            
            public ServiceClientChannel(System.ServiceModel.ClientBase<Notepad.NotepadServiceProxy.IService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddUser(System.Guid userId, string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = userName;
                System.IAsyncResult _result = base.BeginInvoke("AddUser", _args, callback, asyncState);
                return _result;
            }
            
            public System.Guid EndAddUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Guid _result = ((System.Guid)(base.EndInvoke("AddUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddNote(System.Guid userId, string notedescription, string noteText, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = notedescription;
                _args[2] = noteText;
                System.IAsyncResult _result = base.BeginInvoke("AddNote", _args, callback, asyncState);
                return _result;
            }
            
            public Notepad.NotepadServiceProxy.NoteDto EndAddNote(System.IAsyncResult result) {
                object[] _args = new object[0];
                Notepad.NotepadServiceProxy.NoteDto _result = ((Notepad.NotepadServiceProxy.NoteDto)(base.EndInvoke("AddNote", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateNote(int noteId, string noteText, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = noteId;
                _args[1] = noteText;
                System.IAsyncResult _result = base.BeginInvoke("UpdateNote", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateNote(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateNote", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteNote(System.Guid userId, int noteId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = noteId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteNote", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteNote(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteNote", _args, result);
            }
            
            public System.IAsyncResult BeginGetNotes(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetNotes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Notepad.NotepadServiceProxy.NoteDto> EndGetNotes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Notepad.NotepadServiceProxy.NoteDto> _result = ((System.Collections.ObjectModel.ObservableCollection<Notepad.NotepadServiceProxy.NoteDto>)(base.EndInvoke("GetNotes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNote(System.Guid userId, int noteId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = noteId;
                System.IAsyncResult _result = base.BeginInvoke("GetNote", _args, callback, asyncState);
                return _result;
            }
            
            public Notepad.NotepadServiceProxy.NoteDto EndGetNote(System.IAsyncResult result) {
                object[] _args = new object[0];
                Notepad.NotepadServiceProxy.NoteDto _result = ((Notepad.NotepadServiceProxy.NoteDto)(base.EndInvoke("GetNote", _args, result)));
                return _result;
            }
        }
    }
}
